dnl Process this file with autoconf to produce a configure script.

AC_INIT(base64.c)

AC_CANONICAL_HOST

#  UCL checked $host_os and exited if we didn't recognize it.
#  Let's be more optimistic for now.

# XXX
# Backwards compatability to UCL's -D<ostype> for now
# All references to an OS should be replaced by references
# to features!

case "$host_os" in
sunos*)
	AC_DEFINE(SunOS)
	;;
solaris*)
	AC_DEFINE(Solaris)
	;;
esac

AC_PROG_CC
AC_PROG_CPP
AC_PROG_RANLIB

AC_HEADER_STDC
AC_C_CONST
AC_TYPE_SIZE_T

AC_CHECK_HEADERS(stropts.h sys/filio.h)
AC_CHECK_HEADERS(stdint.h inttypes.h)

# Check for standard size types.  The defaults are only valid on some
# systems so we hope that <inttypes.h> exists when they're wrong.
AC_CHECK_TYPE(int8_t,  signed char)
AC_CHECK_TYPE(int16_t, short)
AC_CHECK_TYPE(int32_t, long)
AC_CHECK_TYPE(int64_t, long long)

# Some systems have these in <stdint.h>, just to be difficult...
AC_CACHE_CHECK(for uint8_t in <stdint.h>, ucl_cv_uint8_t_in_stdint_h,
	AC_EGREP_HEADER(uint8_t,
			stdint.h,
			ucl_cv_uint8_t_in_stdint_h=yes,
			ucl_cv_uint8_t_in_stdint_h=no))
if test $ucl_cv_uint8_t_in_stdint_h = "no"
then
	 AC_CHECK_TYPE(uint8_t,  unsigned char)
fi

AC_CACHE_CHECK(for uint16_t in <stdint.h>, ucl_cv_uint16_t_in_stdint_h,
	AC_EGREP_HEADER(uint16_t,
			stdint.h,
			ucl_cv_uint16_t_in_stdint_h=yes,
			ucl_cv_uint16_t_in_stdint_h=no))
if test $ucl_cv_uint16_t_in_stdint_h = "no"
then
	 AC_CHECK_TYPE(uint16_t,  unsigned short)
fi

AC_CACHE_CHECK(for uint32_t in <stdint.h>, ucl_cv_uint32_t_in_stdint_h,
	AC_EGREP_HEADER(uint32_t,
			stdint.h,
			ucl_cv_uint32_t_in_stdint_h=yes,
			ucl_cv_uint32_t_in_stdint_h=no))
if test $ucl_cv_uint32_t_in_stdint_h = "no"
then
	 AC_CHECK_TYPE(uint32_t,  unsigned int)
fi


# The following two macros cause autoconf to complain.
AC_C_BIGENDIAN
AC_C_CHAR_UNSIGNED
#
# The (?which?) library does not work with unsigned characters.
# Force the compiler to use signed chars.
if test $ac_cv_c_char_unsigned = yes
then
	if test "$GCC" = yes
	then
		CFLAGS="$CFLAGS -fsigned-char"
	else
		case "$host_os" in
		# I don't know when "-signed" was added to IRIX CC
		# so err on the side of using it.
		irix*)	CFLAGS="$CFLAGS -signed"
			;;
		# need e.g. --force-signed-chars=-signed
		*)	AC_MSG_ERROR([I don't know how to force signed chars])
			;;
		esac
	fi
fi
#  __CHAR_UNSIGNED__ will be defined; hope this is OK.

# GCC-specific warning flags
if test "$GCC" = yes
then
        CFLAGS="$CFLAGS -W -Wall -Wbad-function-cast -Wmissing-prototypes -Wcast-qual -Wstrict-prototypes -Wmissing-declarations -Werror"
        if test -f .devel
        then
                CFLAGS="$CFLAGS -Werror"
        fi
fi

# The following causes autoconf to complain.
AC_CHECK_FILE(/dev/urandom,AC_DEFINE(HAVE_DEV_URANDOM))

# If more files than mbus.c use vsnprintf, split it out into
# vsnprintf.c and add it to AC_REPLACE_FUNCS
AC_CHECK_FUNC(vsnprintf,,AC_DEFINE(NEED_VSNPRINTF))

# If inet_aton is actually needed somewhere, split it out into
# inet_aton.c and add it to AC_REPLACE_FUNCS

AC_REPLACE_FUNCS(inet_pton inet_ntop)

AC_SEARCH_LIBS(socket, socket)
AC_SEARCH_LIBS(inet_addr, nsl)

# configure defaults CFLAGS to -g -O2
# so a debug flag would have to fail to remove -g
# and the optimize would have to modify or add the -O
# flags:
#  -debug:
#       DEBUG2=$DEBUG
#       AC_DEFINE(DEBUG)
#  -optimize
#       OPTIMIZE2=$OPTIMIZE
#       AC_DEFINE(NDEBUG)
#  -profile
AC_ARG_ENABLE(profile,
	[  --enable-profile        enable profiling],
	[if test $enableval = yes
	then
		if test "$GCC" = yes
		then
			CFLAGS="$CFLAGS -pg"
		else
			AC_ERROR([Don't know how to enable profiling for $CC])
		fi
	fi])

#  -bounds
#       add -fbounds-checking to CFLAGS
#       add -lcheck to LIBS
AC_ARG_ENABLE(bounds,
	[  --enable-bounds         enable bounds checking],
	[if test $enableval = yes
	then
		if test "$GCC" = yes
		then
			CFLAGS="$CFLAGS -fbounds-checking"
			LIBS="$LIBS -lcheck"
		else
			AC_ERROR([Don't know how to enable profiling for $CC])
		fi
	fi])

#  others
#       add as compile flag
# also:
# MBUS_ENCRYPT_BY_DEFAULT

# -DDEBUG
# -DDEBUG_MEM
# -DNDEBUG
AC_ARG_ENABLE(debug,
	[  --enable-debug          enable debug messages and code],
	[if test $enableval = yes
	then
		AC_DEFINE(DEBUG)
	fi])
AC_ARG_ENABLE(debug-mem,
	[  --enable-debug-mem      enable memory debugging code],
	[if test $enableval = yes
	then
		AC_DEFINE(DEBUG_MEM)
	fi])

AC_ARG_ENABLE(ipv6,
	[  --enable-ipv6           enable ipv6],
	[if test $enableval = yes
	then
		AC_DEFINE(HAVE_IPv6)
	fi])

# Test below are IPv6 specific.  Their result has no bearing if HAVE_IPv6 is
# not defined.  They are kept outside IPv6 enable check to keep code readable.

AC_CACHE_CHECK(for getipnodebyname in <netdb.h>, ucl_cv_getipnodebyname_in_netdb_h,
	AC_EGREP_HEADER(getipnodebyname,
		netdb.h,
		ucl_cv_getipnodebyname_in_netdb_h=yes,	
		ucl_cv_getipnodebyname_in_netdb_h=no))
if test $ucl_cv_getipnodebyname_in_netdb_h
then
	AC_DEFINE(HAVE_GETIPNODEBYNAME) 
fi

AC_CHECK_HEADERS(netinet6/in6.h)

AC_CACHE_CHECK(for struct addrinfo in <netdb.h>, ucl_cv_st_addrinfo_in_netdb_h,
	AC_EGREP_HEADER(addrinfo,
		netdb.h,
		ucl_cv_st_addrinfo_in_netdb_h=yes,	
		ucl_cv_st_addrinfo_in_netdb_h=no))
if test $ucl_cv_st_addrinfo_in_netdb_h
then
	AC_DEFINE(HAVE_ST_ADDRINFO) 
fi

AC_CACHE_CHECK(for sin6_len in struct sockaddr_in6, ucl_cv_sin6_len,
	[AC_TRY_COMPILE([
		#ifdef HAVE_NETINET6_IN6_H
		#include <netinet6/in6.h>
		#else
		#include <netinet/in.h>
		#endif /* HAVE_NETINET_IN6_H */
	],[
		struct sockaddr_in6	s_in;
		s_in.sin6_len = 0;
	],
		ucl_cv_sin6_len=yes,	
		ucl_cv_sin6_len=no
	)])
if test $ucl_cv_sin6_len = yes
then
	AC_DEFINE(HAVE_SIN6_LEN) 
fi

# Done, create the output files....
AC_CONFIG_HEADER(uclconf.h:config.h.in)
AC_OUTPUT(Makefile)
